Object subclass: #EmpresaSolicitante	instanceVariableNames: 'identificacion telContacto colSolicitudes colSolicitudesRes solicitudesResueltas'	classVariableNames: ''	package: 'POO-TpoFinal'!!EmpresaSolicitante methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/3/2023 20:28'!esLaMisma: unaIdentificacion	^  identificacion =unaIdentificacion! !!EmpresaSolicitante methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/3/2023 20:28'!getId	^ identificacion ! !!EmpresaSolicitante methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 6/27/2023 20:48'!getResueltas	^ solicitudesResueltas! !!EmpresaSolicitante methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 7/5/2023 17:46'!incrementarsolicitudesResueltas := solicitudesResueltas + 1! !!EmpresaSolicitante methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/3/2023 20:27'!agregarSolicitud: unaSolicitud	colSolicitudes add: unaSolicitud .! !!EmpresaSolicitante methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 7/5/2023 17:45'!contiene: unaSolicitud	 colSolicitudes				detect: [ :cadaElto | 					cadaElto == unaSolicitud]						ifFound: [^true] ifNone:[^false].							! !!EmpresaSolicitante methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/3/2023 20:33'!solicitudesPendientes	|colPendientes|	colPendientes := colSolicitudes select: [ :cadaElto | cadaElto obtenerEstado = 'pendiente' ].	^ colPendientes! !!EmpresaSolicitante methodsFor: 'inicializador' stamp: 'QuirogaNicolasAndres 6/27/2023 20:48'!inicializarEmpresaSolicitante: id telefonoDeContacto: telefono	identificacion := id.	telContacto := telefono.	solicitudesResueltas := 0.	colSolicitudes := OrderedCollection new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmpresaSolicitante class	instanceVariableNames: ''!!EmpresaSolicitante class methodsFor: 'constructor' stamp: 'QuirogaNicolasAndres 2/16/2023 00:28'!crearEmpresaSolicitante: unaIdentificacion telefonoDeContacto: telefono	|nuevaEmpresa|	nuevaEmpresa := self new.	nuevaEmpresa inicializarEmpresaSolicitante: unaIdentificacion  telefonoDeContacto: telefono.	^nuevaEmpresa ! !Object subclass: #GestorDeEmpleo	instanceVariableNames: 'colEmpresaSolicitantes colSolicitudesResueltas colSolicitudes colPropuestas colPostulantes'	classVariableNames: ''	package: 'POO-TpoFinal'!!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/16/2023 00:28'!registrarEmpresaSolicitante: unaIdentificacion telefonoDeContacto: telefono	|nuevaEmpresa|	nuevaEmpresa := EmpresaSolicitante crearEmpresaSolicitante: unaIdentificacion  telefonoDeContacto: telefono.	colEmpresaSolicitantes add: nuevaEmpresa . ! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/7/2023 11:47'!buscarEmpresa: unaIdentificacion|empresaBuscada|	empresaBuscada := colEmpresaSolicitantes detect: [ :cadaElto | cadaElto esLaMisma: unaIdentificacion  ] 	ifNone: [ ^ nil ].	^ empresaBuscada ! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/11/2023 12:38'!listarSolicitudesAtendidas	| colSolicitudesAtendidas |	colSolicitudesAtendidas := colSolicitudesResueltas		collect: [ :cadaElto | cadaElto listarDatos ].	^ colSolicitudesAtendidas! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/18/2023 20:46'!yaEstaRegistrada: unaIdentificacion			^colPostulantes		anySatisfy: [ :cadaElto | cadaElto getId == unaIdentificacion ]! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/4/2023 20:15'!actualizarSolicitudes	colSolicitudes do: [ :cadaElto | cadaElto actualizarEstado ]! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/11/2023 12:42'!listarSolicitudesDelDia: unaFecha	|colSolicitudesDelDia|	colSolicitudesDelDia := colSolicitudes select: [ :cadaElto | (cadaElto obtenerFechaRegistro) = unaFecha  ].	^colSolicitudesDelDia	! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/11/2023 00:59'!listarEmpresasCombinadas: unProducto	| listadoCombinadas |	listadoCombinadas := colPostulantes		select: [ :cadaElto | 			(cadaElto esEmpresaCombinada: unProducto)].	^ listadoCombinadas! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/11/2023 12:32'!listarPersonas	|listadoPersonas|	listadoPersonas := colPostulantes select: [ :cadaElto | cadaElto esPersona ].	^listadoPersonas! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/10/2023 19:40'!iniciarDia	self actualizarSolicitudes.	self generarPropuestas.	colEmpresaSolicitantes do: [ :cadaElto | cadaElto controlDeFraude: cadaElto ]! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/11/2023 12:25'!listarEmpresasPorSolicitudes	| empresasOrdenadas i j aux |	empresasOrdenadas := OrderedCollection new.	empresasOrdenadas addAll: colEmpresaSolicitantes.	i := 0.	j := 0.	aux := nil.	[ i <= (colEmpresaSolicitantes size - 2) ]		whileTrue: [ [ (j <= colEmpresaSolicitantes size) - 2 - i ]				whileTrue: [ (empresasOrdenadas at: j + 1) getResueltas						< (empresasOrdenadas at: j) getResueltas						ifTrue: [ aux := empresasOrdenadas at: j + 1.							empresasOrdenadas at: j + 1 put: (empresasOrdenadas at: j) ].					empresasOrdenadas at: j put: aux ] ].			^ empresasOrdenadas! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/8/2023 22:13'!hayFraude: unaEmpresaSolicitante propuesta: unaPropuesta	^unaPropuesta mismaEmpresa: unaEmpresaSolicitante ! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/18/2023 20:35'!validarPropuestas: laSolicitud listadoDePostulantes: unListado|nuevaPropuesta|	unListado do: [ :cadaElto | (cadaElto esIdoneo: laSolicitud) 		ifTrue: [ nuevaPropuesta := Propuesta crearPropuesta: cadaElto solicitud: laSolicitud. colPropuestas add: nuevaPropuesta   ]  ]! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/18/2023 20:27'!revalidarSolicitud: unaSolicitud tiempoExtra: extension	unaSolicitud extenderValidez: extension.! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/19/2023 21:10'!buscarPostulantes: laSolicitud	| tipo unProducto listadoPostulantes |	tipo := laSolicitud obtenerTipo.	"Creo que esta mal que yo cree una orderedCollection si despues solamente le voy a asignar lo que cree en otra coleccion"	listadoPostulantes := OrderedCollection new.	tipo = 'producto'		ifTrue: [ unProducto := laSolicitud obtenerProducto.			listadoPostulantes				addAll: (colPostulantes listarEmpresasCombinadas: unProducto) ]		ifFalse: [ listadoPostulantes addAll: colPostulantes listarPersonas.			tipo = 'servicio'				ifTrue: [ laSolicitud requiereServicioProlongado						ifTrue: [ listadoPostulantes addAll: colPostulantes listarEmpresasUniformes ]						ifFalse: [ "voy a pasar nulo por parametro cuando 						no haya nada que buscar"							listadoPostulantes addAll: colPostulantes listarEmpresasPuntuales.							listadoPostulantes								addAll: (colPostulantes listarEmpresasCombinadas: nil) ] ] ].	^ listadoPostulantes! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/22/2023 13:37'!generarPropuestas	| laSolicitud listadoPostulantes |	"colSolicitudes isNotEmpty		whileTrue: [ laSolicitud := self obtenerSolicitudMasAntigua.			listadoPostulantes := self buscarPostulantes: laSolicitud.			self				validarPropuestas: laSolicitud				listadoDePostulantes: listadoPostulantes.			colSolicitudes remove: laSolicitud ]"	laSolicitud := self obtenerSolicitudMasAntigua.	laSolicitud notNil		whileTrue: [ listadoPostulantes := self buscarPostulantes: laSolicitud.			listadoPostulantes isNotEmpty				ifTrue: [ self						validarPropuestas: laSolicitud						listadoDePostulantes: listadoPostulantes.					laSolicitud marcarComoChequeada ]. laSolicitud := self obtenerSolicitudMasAntigua. ]! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/22/2023 13:27'!obtenerSolicitudMasAntigua	| solicitudMasVieja |	solicitudMasVieja := colSolicitudes		inject: (colSolicitudes at: 1)		into: [ :masVieja :cadaElto | masVieja esMasVieja: cadaElto ].		((solicitudMasVieja obtenerEstado = 'vencida') or: (solicitudMasVieja obtenerEstado = 'chequeada'))		 ifTrue: [solicitudMasVieja := nil].	^ solicitudMasVieja! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 6/27/2023 20:50'!aceptarPropuesta: unaPropuesta	| unaSolicitud solicitudResuelta |	"obtenemos la solicitud y la marcamos como resuelta"	unaSolicitud := unaPropuesta getSolicitud marcarComoResuelta.	"creamos una nueva solicitud resuelta"	solicitudResuelta := SolicitudResuelta		crearSolicitudResuelta: unaSolicitud		fechaDeResolucion: Date today ddmmyyyy		propuesta: unaPropuesta.	"agregamos la nueva solicitud resuelta a colSolicitudesResueltas, eliminando la solicitud vieja de las solicitudes 	a resolver. Del mismo modo, tambien se elimina la propuesta de las pendientes"	colSolicitudesResueltas add: solicitudResuelta.	colSolicitudes remove: unaSolicitud.	colPropuestas remove: unaPropuesta.	"eliminamos tambien las propuestas asociadas a la solicitud"	"esta bien usado el self acÃ¡?"	self eliminarDemasPropuestas: unaSolicitud.	self actualizarEmpresa: unaSolicitud.! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/11/2023 12:31'!listarEmpresasUniformes	|listadoUniformes|	listadoUniformes := colPostulantes select: [ :cadaElto | cadaElto esEmpresaUniforme ].	^listadoUniformes! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/11/2023 12:43'!listarSolicitudesPendientes: unaEmpresa	^ unaEmpresa solicitudesPendientes ! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/11/2023 12:29'!listarEmpresasPuntuales	|listadoPuntuales|	listadoPuntuales :=colPostulantes select: [ :cadaElto | cadaElto esEmpresaPuntual ].	^listadoPuntuales ! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/16/2023 00:49'!registrarSolicitud: unaIdentificacion solicitud: unaSolicitud"Si yo hago esto aca entonces cuando creo las solicitudeS?????"	| empresaSolicitante |	empresaSolicitante := colEmpresaSolicitantes		detect: [ :cadaElto | cadaElto getId = unaIdentificacion ]		ifNone: [ ^ nil ].	empresaSolicitante agregarSolicitud: unaSolicitud! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 7/5/2023 17:46'!actualizarEmpresa: unaSolicitud	| empresaParaActualizar |		 empresaParaActualizar := colEmpresaSolicitantes				detect: [ :cadaElto | cadaElto contiene: unaSolicitud ].		empresaParaActualizar incrementar.					 ! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/16/2023 00:23'!registrarEmpresaCombinada: unaIdentificacion razonSocial: unaRazonSocial telefonoDeContacto: telefono rubro: unRubro puntosDeTrabajo: algunosPuntos rango: unRango tipo: unTipo productoOfrecido: unProducto	| nuevaEmpresa |	nuevaEmpresa := EmpresaCombinada		crearEmpresaCombinada: unaIdentificacion		razonSocial: unaRazonSocial		telefono: telefono		rubro: unRubro		puntosDeTrabajo: algunosPuntos		tipo: unTipo		productoOfrecido: unProducto.	colPostulantes add: nuevaEmpresa! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 7/5/2023 18:27'!controlDeFraude: unaEmpresaSolicitante	| colSolicitudesPendientes |		colSolicitudesPendientes := OrderedCollection new.	colSolicitudesPendientes		addAll: unaEmpresaSolicitante solicitudesPendientes.	colSolicitudesPendientes	"ya no modifico a medida que voy avanzando, espero que funcione"		do: [ :unaSolicitud | 			colPropuestas				removeAllSuchThat: [ :cadaElto | 					(cadaElto mismaSolicitud: unaSolicitud)						& (self hayFraude: unaEmpresaSolicitante propuesta: cadaElto) ] ]	"Estoy modificando la coleccion a medida que avanzo, esta mal eso?"	"colPropuestas				do: [ :cadaElto | 					(cadaElto mismaSolicitud: unaSolicitud)						ifTrue: [ (self hayFraude: unaEmpresaSolicitante propuesta: cadaElto)								ifTrue: [ colPropuestas remove: cadaElto ] ] ] ]"! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/16/2023 00:25'!registrarEmpresaPostulante: unaIdentificacion razonSocial: unaRazonSocial telefonoDeContacto: telefono rubro: unRubro puntosDeTrabajo: algunosPuntos tipo: unTipo	| nuevaEmpresa |	nuevaEmpresa := Empresa		crearEmpresa: unaIdentificacion		razonSocial: unaRazonSocial		telefono: telefono		rubro: unRubro		puntosDeTrabajo: algunosPuntos		tipo: unTipo.		colPostulantes add: nuevaEmpresa .! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/16/2023 00:30'!registrarPersonaPostulante: unaIdentificacion razonSocial: unaRazonSocial telefonoDeContacto: telefono|nuevaPersona|nuevaPersona := Persona crearPersona: unaIdentificacion  razonSocial: unaRazonSocial  telefono: telefono.colPostulantes add: nuevaPersona. 	! !!GestorDeEmpleo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 7/5/2023 18:31'!eliminarDemasPropuestas: unaSolicitud	colPropuestas		removeAllSuchThat:			[ :cadaElto |  cadaElto mismaSolicitud: unaSolicitud ]! !!GestorDeEmpleo methodsFor: 'inicializador' stamp: 'QuirogaNicolasAndres 2/8/2023 22:14'!inicializarGestorDeEmpleos	colEmpresaSolicitantes := OrderedCollection new.	colSolicitudesResueltas := OrderedCollection new.	colSolicitudes := OrderedCollection new.	colPropuestas := OrderedCollection new.	colPostulantes := OrderedCollection new.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GestorDeEmpleo class	instanceVariableNames: ''!!GestorDeEmpleo class methodsFor: 'constructor' stamp: 'QuirogaNicolasAndres 1/30/2023 23:47'!crearGestorDeEmpleo"| nuevo |	nuevo := self new.	nuevo inicializarItem: unaId nombre: unNombre valor: unValor.	^ nuevo"! !Object subclass: #Postulante	instanceVariableNames: 'identificacion razonSocial telContacto'	classVariableNames: ''	package: 'POO-TpoFinal'!!Postulante methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/3/2023 20:16'!esMismoPostulante: unaIdentificacion	^ identificacion = unaIdentificacion ! !!Postulante methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/3/2023 20:15'!getId	^identificacion ! !!Postulante methodsFor: 'de aplicacion'!esEmpresaCombinada: unProducto	^ false! !!Postulante methodsFor: 'de aplicacion'!esEmpresaPuntual	^false! !!Postulante methodsFor: 'de aplicacion'!esEmpresaUniforme	^false! !!Postulante methodsFor: 'de aplicacion'!esPersona	^false! !!Postulante methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/3/2023 20:15'!getRazonSocial	"no lo uso en los diagramas pero tampoco esta de mas tenerlo"^razonSocial 	! !!Postulante methodsFor: 'inicializador' stamp: 'QuirogaNicolasAndres 2/3/2023 20:26'!inicializarPostulante: unaIdentificacion razonSocial: unaRazonSocial telefono: unTelefono	identificacion := unaIdentificacion .	razonSocial := unaRazonSocial .	telContacto := unTelefono.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Postulante class	instanceVariableNames: ''!!Postulante class methodsFor: 'constructor'!crearPostulante: unaIdentificacion razonSocial: unaRazonSocial telefono: unTelefono	|nuevo|	nuevo := self new.	nuevo inicializarPostulante: unaIdentificacion  razonSocial: unaRazonSocial  telefono: unTelefono .	^ nuevo! !Postulante subclass: #Empresa	instanceVariableNames: 'rubro puntosDeTrabajo rango tipo'	classVariableNames: 'maximo'	package: 'POO-TpoFinal'!!Empresa methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/18/2023 21:47'!esIdoneo: unaSolicitud	| idoneidad descripcion montoAPagar |	descripcion := unaSolicitud obtenerDescripcion.	montoAPagar := unaSolicitud obtenerMonto.	idoneidad := false.	(descripcion = rubro and: montoAPagar <= rango)		ifTrue: [ idoneidad := true ].	^ idoneidad! !!Empresa methodsFor: 'de aplicacion'!esEmpresaPuntual	"ESTO 	LO 	PUEDO 	SIMPLIFICAR EN UN SOLO METODO PASANDO EL TIPO DE EMPRESA"	"Estos metodos se heredarian de la super clase???"	^ tipo = 'puntual'! !!Empresa methodsFor: 'de aplicacion'!esEmpresaUniforme	| esUniforme |	"Estos metodos se heredarian de la super clase???"	esUniforme := false.	tipo = 'uniforme'		ifTrue: [ esUniforme := true ].	^ esUniforme! !!Empresa methodsFor: 'inicializador'!inicializarEmpresa: unaIdentificacion razonSocial: unaRazonSocial telefono: unTelefono rubro: unRubro puntosDeTrabajo: unosPuntos tipo: unTipo	"Tendria que usar tambien lo que viene siendo un constructor de la super clase entonces no recuerdo si para este inicializador tenia que pasar todos los atributos"	self		inicializarPostulante: unaIdentificacion		razonSocial: unaRazonSocial		telefono: unTelefono.	rubro := unRubro.	puntosDeTrabajo := unosPuntos.	tipo := unTipo.	rango := puntosDeTrabajo * maximo! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Empresa class	instanceVariableNames: ''!!Empresa class methodsFor: 'constructor'!crearEmpresa: unaIdentificacion razonSocial: unaRazonSocial telefono: unTelefono rubro: unRubro puntosDeTrabajo: unosPuntos tipo: unTipo	|nueva|	nueva := self new.	nueva inicializarEmpresa: unaIdentificacion 	razonSocial: unaRazonSocial telefono: unTelefono rubro: unRubro puntosDeTrabajo: unosPuntos tipo: unTipo.	^ nueva! !Empresa subclass: #EmpresaCombinada	instanceVariableNames: 'productoOfrecido'	classVariableNames: ''	package: 'POO-TpoFinal'!!EmpresaCombinada methodsFor: 'inicializador'!inicializarEmpresaCombinada: unaIdentificacion razonSocial: unaRazonSocial telefono: unTelefono rubro: unRubro puntosDeTrabajo: unosPuntos tipo: unTipo productoOfrecido: unProducto"INICIALIZAR LO USO CON SELF O SUPER?"	self		inicializarEmpresa: unaIdentificacion		razonSocial: unaRazonSocial		telefono: unTelefono		rubro: unRubro		puntosDeTrabajo: unosPuntos		tipo: unTipo.	"EL RANGO LO DEBERIA CALCULAR ACÃ O EN EL INICIALIZADOR DE LA SUPER??ESTA BIEN COMO ACCEDO A LA VARIABLE DE CLASE O SE HACIA DE OTRA FORMA?"	rango := puntosDeTrabajo * maximo.	productoOfrecido := unProducto! !!EmpresaCombinada methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/18/2023 22:01'!esEmpresaCombinada: unProducto	| combinada |	combinada := false.	(unProducto notNil) ifTrue:[	productoOfrecido = unProducto		ifTrue: [ combinada := true ]] ifFalse: [ combinada := true].	^ combinada! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmpresaCombinada class	instanceVariableNames: ''!!EmpresaCombinada class methodsFor: 'constructor' stamp: 'QuirogaNicolasAndres 2/3/2023 00:21'!crearEmpresaCombinada: unaIdentificacion razonSocial: unaRazonSocial telefono: unTelefono rubro: unRubro puntosDeTrabajo: unosPuntos tipo: unTipo productoOfrecido: unProducto	|nueva|	nueva := self new.	nueva inicializarEmpresaCombinada: unaIdentificacion razonSocial: unaRazonSocial	telefono: unTelefono rubro: unRubro puntosDeTrabajo: unosPuntos tipo: unTipo productoOfrecido: unProducto.	^ nueva! !Postulante subclass: #Persona	instanceVariableNames: 'colAptitudes'	classVariableNames: 'maximoIndividual'	package: 'POO-TpoFinal'!!Persona methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/18/2023 21:31'!esIdoneo: unaSolicitud	| idoneidad descripcion montoAPagar|	descripcion := unaSolicitud obtenerDescripcion .	montoAPagar := unaSolicitud obtenerMonto .	idoneidad := (colAptitudes includes: descripcion)		and: montoAPagar < maximoIndividual.	^ idoneidad! !!Persona methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/3/2023 00:05'!nuevaAptitud: unaAptitud	colAptitudes add: unaAptitud.! !!Persona methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/3/2023 00:01'!esPersona	^ true! !!Persona methodsFor: 'inicializador' stamp: 'QuirogaNicolasAndres 2/3/2023 00:08'!inicializarPersona: unaIdentificacion razonSocial: unaRazonSocial telefono: unTelefonoself inicializarPostulante: unaIdentificacion razonSocial: unaRazonSocial telefono: unTelefono.colAptitudes := OrderedCollection new.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Persona class	instanceVariableNames: ''!!Persona class methodsFor: 'constructor' stamp: 'QuirogaNicolasAndres 2/3/2023 00:08'!crearPersona: unaIdentificacion razonSocial: unaRazonSocial telefono: unTelefono	| nueva |	nueva := self new.	nueva		inicializarPersona: unaIdentificacion		razonSocial: unaRazonSocial		telefono: unTelefono.		^ nueva! !Object subclass: #Propuesta	instanceVariableNames: 'nroIdentificacion postulante solicitud'	classVariableNames: 'numeroPropuestas'	package: 'POO-TpoFinal'!!Propuesta methodsFor: 'inicializador' stamp: 'QuirogaNicolasAndres 2/18/2023 21:25'!inicializarPropuesta: unPostulante solicitud: unaSolicitud"Esta bien accedido la variable de clase?"	nroIdentificacion := numeroPropuestas + 1.	postulante := unPostulante.	solicitud := unaSolicitud! !!Propuesta methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 23:53'!getSolicitud	^ solicitud ! !!Propuesta methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 23:57'!mismaEmpresa: unaEmpresaSolicitante	| fraude |	fraude := false.	unaEmpresaSolicitante getId = postulante getId		ifTrue: [ fraude := true ].	^ fraude! !!Propuesta methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/7/2023 20:08'!mismaSolicitud: unaSolicitud	| pertenece |	pertenece := false.	unaSolicitud == solicitud		ifTrue: [ pertenece := true ].	^ pertenece! !!Propuesta methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 23:52'!getId	^ nroIdentificacion ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Propuesta class	instanceVariableNames: ''!!Propuesta class methodsFor: 'constructor' stamp: 'QuirogaNicolasAndres 2/18/2023 21:26'!crearPropuesta: unPostulante solicitud: unaSolicitud	| nueva |	nueva := self new.	nueva		inicializarPropuesta: unPostulante		solicitud: unaSolicitud.	^ nueva! !!Propuesta class methodsFor: 'inicializador' stamp: 'QuirogaNicolasAndres 2/18/2023 21:22'!inicializarCantidadnumeroPropuestas := 0.! !!Propuesta class methodsFor: 'observador' stamp: 'QuirogaNicolasAndres 2/18/2023 21:23'!getCantidad^numeroPropuestas ! !Object subclass: #Solicitud	instanceVariableNames: 'nroIdentificacion fechaRegistro fechaVencimiento montoAPagar descripcion estado'	classVariableNames: ''	package: 'POO-TpoFinal'!!Solicitud methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/22/2023 13:34'!marcarComoChequeadaestado:= 'chequeada'.! !!Solicitud methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 22:33'!requiereServicioProlongado	^ false! !!Solicitud methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/22/2023 12:49'!esMasVieja: unaSolicitud	| masVieja fecha2 |	masVieja := self.	((unaSolicitud obtenerEstado = 'vencida') or: (unaSolicitud obtenerEstado ='chequeada'))		ifFalse: [ fecha2 := unaSolicitud obtenerFechaRegistro.			(fechaRegistro year < fecha2 year				or: [ fechaRegistro year = fecha2 year						and: [ fechaRegistro monthIndex < fecha2 monthIndex								or: [ fechaRegistro monthIndex = fecha2 monthIndex										and: [ fechaRegistro dayOfMonth < fecha2 dayOfMonth ] ] ] ])				ifFalse: [ masVieja := unaSolicitud ] ].	^ masVieja! !!Solicitud methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 22:33'!marcarComoResuelta	estado := 'resuelta'.! !!Solicitud methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 22:32'!getId	^ nroIdentificacion ! !!Solicitud methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 22:29'!actualizarEstado|fechaDeHoy|	fechaDeHoy := Date today ddmmyyyy ..	(fechaVencimiento isBefore: fechaDeHoy)	ifTrue: [ estado := 'vencida' ] ! !!Solicitud methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 22:32'!extenderValidez: tiempoExtra	fechaVencimiento := fechaVencimiento addDays: tiempoExtra.! !!Solicitud methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 22:33'!obtenerEstado	^ estado! !!Solicitud methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/18/2023 21:29'!obtenerDescripcion^descripcion ! !!Solicitud methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 22:33'!obtenerFechaRegistro	^fechaRegistro ! !!Solicitud methodsFor: 'inicializador' stamp: 'QuirogaNicolasAndres 2/2/2023 23:36'!inicializarSolicitud: unaIdentificacion fechaDeVencimiento: unVencimiento montoAPagar: unMonto descripcion: unaDescripcion	nroIdentificacion := unaIdentificacion.	fechaVencimiento := unVencimiento.	montoAPagar := unMonto.	descripcion := unaDescripcion.	fechaRegistro := Date today ddmmyyyy ! !Solicitud subclass: #DeProducto	instanceVariableNames: 'producto'	classVariableNames: ''	package: 'POO-TpoFinal'!!DeProducto methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 17:23'!obtenerTipo^'producto'	! !!DeProducto methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 17:24'!obtenerProducto	^ producto ! !!DeProducto methodsFor: 'inicializador' stamp: 'QuirogaNicolasAndres 2/2/2023 23:35'!inicializarDeProducto: unaIdentificacion fechaDeVencimiento: unVencimiento montoAPagar: unMonto descripcion: unaDescripcion producto: unProducto	"Esta bien hecho esto?"	self		inicializarSolicitud: unaIdentificacion		fechaDeVencimiento: unVencimiento		montoAPagar: unMonto		descripcion: unaDescripcion.	producto := unProducto! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DeProducto class	instanceVariableNames: ''!!DeProducto class methodsFor: 'constructor' stamp: 'QuirogaNicolasAndres 2/2/2023 23:34'!crearSolicitudDeProducto: unaIdentificacion fechaDeVencimiento: unVencimiento montoAPagar: unMonto descripcion: unaDescripcion producto: unProducto	| nueva |	nueva := self new.	nueva		inicializarDeProducto: unaIdentificacion fechaDeVencimiento: unVencimiento montoAPagar: unMonto 		descripcion: unaDescripcion producto: unProducto.	^ nueva! !Solicitud subclass: #DeServicio	instanceVariableNames: 'servicioProlongado'	classVariableNames: ''	package: 'POO-TpoFinal'!!DeServicio methodsFor: 'inicializador' stamp: 'QuirogaNicolasAndres 2/2/2023 23:35'!inicializarDeServicio: unaIdentificacion fechaDeVencimiento: unVencimiento montoAPagar: unMonto descripcion: unaDescripcion servicioProlongado: requiere	"bien hecho?"	self		inicializarSolicitud: unaIdentificacion		fechaDeVencimiento: unVencimiento		montoAPagar: unMonto		descripcion: unaDescripcion.	servicioProlongado := requiere! !!DeServicio methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 17:23'!obtenerTipo	^ 'servicio'! !!DeServicio methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 22:34'!requiereServicioProlongado	^ servicioProlongado ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DeServicio class	instanceVariableNames: ''!!DeServicio class methodsFor: 'constructor' stamp: 'QuirogaNicolasAndres 2/2/2023 23:32'!crearDeServicio: unaIdentificacion fechaDeVencimiento: unVencimiento montoAPagar: unMonto descripcion: unaDescripcion servicioProlongado: requiere	| nueva |	nueva := self new.	nueva		inicializarDeServicio: unaIdentificacion fechaDeVencimiento: unVencimiento montoAPagar: unMonto		 descripcion: unaDescripcion  servicioProlongado: requiere.	^ nueva! !Solicitud subclass: #DeTrabajo	instanceVariableNames: ''	classVariableNames: ''	package: 'POO-TpoFinal'!!DeTrabajo methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 17:23'!obtenerTipo	^ 'trabajo'! !!DeTrabajo methodsFor: 'inicializador' stamp: 'QuirogaNicolasAndres 2/2/2023 23:39'!inicializarDeTrabajo: unaIdentificacion fechaDeVencimiento: unVencimiento montoAPagar: unMonto descripcion: unaDescripcion	"Esta bien hecho asi o deberia llamar directamente a el inicializador de la solicitud (superClase)"	self		inicializarSolicitud: unaIdentificacion		fechaDeVencimiento: unVencimiento		montoAPagar: unMonto		descripcion: unaDescripcion.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DeTrabajo class	instanceVariableNames: ''!!DeTrabajo class methodsFor: 'constructor' stamp: 'QuirogaNicolasAndres 2/2/2023 22:42'!crearDeTrabajo: unaIdentificacion fechaDeVencimiento: unVencimiento montoAPagar: unMonto descripcion: unaDescripcion	|nueva|	nueva := self new.	nueva inicializarDeTrabajo: unaIdentificacion fechaDeVencimiento: unVencimiento montoAPagar: unMonto descripcion: unaDescripcion. ^nueva ! !Object subclass: #SolicitudResuelta	instanceVariableNames: 'solicitud fechaDeResolucion propuesta'	classVariableNames: ''	package: 'POO-TpoFinal'!!SolicitudResuelta methodsFor: 'de aplicacion' stamp: 'QuirogaNicolasAndres 2/2/2023 23:52'!listarDatos	|idSolicitud idPropuesta|	idSolicitud := solicitud getId.	idPropuesta := propuesta getId.^ 'Numero de Solicitud: ', idSolicitud asString, '. Numero de propuesta: ', idPropuesta asString, '. Fecha de resolucion: ', fechaDeResolucion asString .! !!SolicitudResuelta methodsFor: 'inicializador' stamp: 'QuirogaNicolasAndres 2/2/2023 23:38'!inicializarSolicitudResuelta: unaSolicitud fechaDeResolucion: unaFecha propuesta: unaPropuesta	solicitud := unaSolicitud.	fechaDeResolucion := unaFecha.	propuesta := unaPropuesta.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SolicitudResuelta class	instanceVariableNames: ''!!SolicitudResuelta class methodsFor: 'constructor' stamp: 'QuirogaNicolasAndres 2/2/2023 23:40'!crearSolicitudResuelta: unaSolicitud fechaDeResolucion: unaFecha propuesta: unaPropuesta	|nueva|	nueva := self new.	nueva inicializarSolicitudResuelta: unaSolicitud fechaDeResolucion: unaFecha propuesta: unaPropuesta.	^ nueva.! !